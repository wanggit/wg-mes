<?xml version="1.0" encoding="UTF-8"?>
<!--

    ***************************************************************************
    Copyright (c) 2010 Qcadoo Limited
    Project: Qcadoo Framework
    Version: 1.4

    This file is part of Qcadoo.

    Qcadoo is free software; you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation; either version 3 of the License,
    or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty
    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
    ***************************************************************************

-->
<view defaultAuthorizationRole="ROLE_REQUIREMENTS" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns="http://schema.qcadoo.org/view"
      xsi:schemaLocation="http://schema.qcadoo.org/view http://schema.qcadoo.org/view.xsd"
      name="warehouseIssueList" modelName="warehouseIssue"
      menuAccessible="true">

    <component type="window" name="window" reference="window">

        <ribbon>
            <template name="standardGridTemplate"/>
            <group name="status">
                <smallButton name="confirmIssue" icon="startIcon16.png" state="disabled">
                    <script>
                        <![CDATA[
							this.addOnChangeListener({
								onClick: function() {
								var actualState = this.actualState;
									    if (window.confirm("#{translate(productFlowThruDivision.warehouseIssueDetails.window.ribbon.status.confirmIssue.confirm)}")) {
									    	#{grid}.performEvent('changeState', ['02inProgress']);
									    }

								}
							});
						]]>
                    </script>
                </smallButton>
                <smallButton name="refuseIssue" icon="deleteIcon16.png"
                             state="disabled">
                    <script>
                        <![CDATA[
							this.addOnChangeListener({
								onClick: function() {
									if (window.confirm("#{translate(productFlowThruDivision.warehouseIssueDetails.window.ribbon.status.refuseIssue.confirm)}")) {
										#{grid}.performEvent('changeState', ['03discard']);

									}
								}
							});
						]]>
                    </script>
                </smallButton>
                <smallButton name="completeIssue" icon="acceptIcon16.png"
                             state="disabled">
                    <script>
                        <![CDATA[
							this.addOnChangeListener({
								onClick: function() {
									if (window.confirm("#{translate(productFlowThruDivision.warehouseIssueDetails.window.ribbon.status.completedIssue.confirm)}")) {
										#{grid}.performEvent('changeState', ['04completed']);
									};
								}
							});
						]]>
                    </script>
                </smallButton>
            </group>
            <group name="generate">
                <bigButton name="generate" icon="startIcon24.png"
                           action="#{grid}.fireEvent(generateWarehouseIssues);"
                           state="enabled"/>
            </group>

        </ribbon>

        <component type="grid" name="warehouseIssueForm"
                   reference="grid">
            <script>
                <![CDATA[
					var copyBtn = #{window}.getRibbonItem("actions.copy");
					var deleteBtn = #{window}.getRibbonItem("actions.delete");
					var confirmIssue = #{window}.getRibbonItem("status.confirmIssue");
					var refuseIssue = #{window}.getRibbonItem("status.refuseIssue");
					var completeIssue = #{window}.getRibbonItem("status.completeIssue");
					var listener = {
						onChange: function(selectedEntitiesArray) {
							if (!selectedEntitiesArray || selectedEntitiesArray.length == 0) {
								copyBtn.disable();
								deleteBtn.disable();
								confirmIssue.disable();
								refuseIssue.disable();
								completeIssue.disable();
							} else {
								var noDifferentStates = true;
 								if(selectedEntitiesArray.length > 1)
								{
									for (var i = selectedEntitiesArray.length-1 ; i > 0 ; i--) {
										if (selectedEntitiesArray[i-1].fields.state != selectedEntitiesArray[i].fields.state) {
											noDifferentStates = false;
											break;
										}
									}
								}
								if (selectedEntitiesArray.length == 1 || noDifferentStates) {
									var state = selectedEntitiesArray[0].fields.state;
						            updateRibbon(state);
						            if (state == "01draft") {
									confirmIssue.enable();
								    refuseIssue.enable();
								    completeIssue.disable();
								} else if (state == "02inProgress") {
                                    confirmIssue.enable();
								    refuseIssue.disable();
								    completeIssue.enable();
								}else if (state == "03discard") {
								    confirmIssue.disable();
								    refuseIssue.disable();
								    completeIssue.disable();
								}else if (state == "04completed") {
								    confirmIssue.disable();
								    refuseIssue.disable();
								    completeIssue.disable();
								}
						            if (selectedEntitiesArray.length == 1) {
						                copyBtn.enable();

						            }

								}else{
								    copyBtn.disable();
								    deleteBtn.disable();
								    confirmIssue.disable();
									refuseIssue.disable();
									completeIssue.disable();
								}

							}
						}
					}
					function toggleEditable(enabled) {
							var toggleRibbonItems = [
									"actions.delete"
								],
								toggleRibbonItemsLen = toggleRibbonItems.length,
								elementIndex = 0,
								ribbonItemName = "",
								ribbonItem = null;

							for (elementIndex = 0; elementIndex < toggleRibbonItemsLen; elementIndex++) {
								ribbonItemName = toggleRibbonItems[elementIndex];
								ribbonItem = #{window}.getRibbonItem(ribbonItemName);

								if (!ribbonItem) {
									QCD.error("Can not find ribbon element: " + ribbonItemName + " - omitting.");
									continue;
								}

								if (enabled) {
									ribbonItem.enable();
								} else {
									ribbonItem.disable();
								}
							}
						}

						function updateRibbon(state) {
							if (state == "01draft") {
								toggleEditable(true);
							} else {
								toggleEditable(false);
							}
						}
					this.addOnChangeListener(listener);
				]]>
            </script>
            <option type="column" name="number" fields="number"
                    width="100" link="true"/>

			<option type="column" name="description" fields="description" width="100"/>

            <option type="column" name="placeOfIssue" fields="placeOfIssue"
                    expression="#placeOfIssue['number']" width="50" link="true"/>

            <option type="column" name="order" fields="order"
                    expression="#order['number']" width="100" link="true"/>

            <option type="column" name="state" fields="state" width="35"/>

            <option type="column" name="dateOfCreation" fields="dateOfCreation" width="35"/>

			<option type="column" name="orderStartDate" fields="orderStartDate" width="35"/>

            <option type="correspondingView" value="productFlowThruDivision/warehouseIssueDetails"/>
            <option type="correspondingComponent" value="form"/>

            <option type="order" column="number" direction="desc"/>

            <option type="searchable"
                    value="number,placeOfIssue,order,state,dateOfCreation,orderStartDate,description"/>
            <option type="orderable"
                    value="number,placeOfIssue,order,state,dateOfCreation,orderStartDate,description"/>

            <option type="fullscreen" value="true"/>
            <option type="multiselect" value="true"/>
            <listener event="changeState"
                      class="com.qcadoo.mes.productFlowThruDivision.warehouseIssue.states.client.WarehouseIssueStateChangeViewClient"
                      method="changeState"/>
            <listener event="generateWarehouseIssues"
                      class="com.qcadoo.mes.productFlowThruDivision.warehouseIssue.listeners.WarehouseIssueListListeners"
                      method="generateWarehouseIssues"/>

        </component>

        <option type="fixedHeight" value="true"/>
        <option type="header" value="false"/>
    </component>

    <hooks>
    </hooks>

</view>
