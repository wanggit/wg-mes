<!--

    ***************************************************************************
    Copyright (c) 2010 Qcadoo Limited
    Project: Qcadoo Framework
    Version: 1.4

    This file is part of Qcadoo.

    Qcadoo is free software; you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation; either version 3 of the License,
    or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty
    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
    ***************************************************************************

-->
<view defaultAuthorizationRole="ROLE_ADVANCED_GENEALOGY" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schema.qcadoo.org/view"
	xsi:schemaLocation="http://schema.qcadoo.org/view http://schema.qcadoo.org/view.xsd"
	name="genealogyTableDetails" 
	modelName="genealogyReport">

	<component type="window" name="window" reference="window">
		<ribbon>
			<template name="standardFormTemplate" />
						<group name="generate">
				<bigButton name="generate" icon="generateIcon24.png"
					action="#{form}.fireEvent(generateReport);" state="disabled" />
			</group>
			<group name="export">
				<bigButton name="pdf" icon="pdfIcon24.png"
					action="#{form}.fireEvent(printReport,pdf);" state="disabled" />
			</group>
		</ribbon>
	    <component type="form" name="genealogyTableDetails"
			reference="form">
			<script>
				<![CDATA[
					var copyRibbonItem = #{window}.getRibbonItem("actions.copy");
					var xlsRibbonItem = #{window}.getRibbonItem("export.xls");
					var pdfRibbonItem = #{window}.getRibbonItem("export.pdf");
					var saveRibbonItem = #{window}.getRibbonItem("actions.save");
					var saveBack = #{window}.getRibbonItem("actions.saveBack");
					var saveNew = #{window}.getRibbonItem("actions.saveNew");
					var generateRibbonItem = #{window}.getRibbonItem("generate.generate");
					var cancel = #{window}.getRibbonItem("actions.cancel");
					
					this.addOnChangeListener({
						onSetValue: function(value) {
							var isGenerated = #{isGenerated}.getValue().content.value == "1";
							var isSaved = (#{form}.getValue().content && #{form}.getValue().content.entityId);
							
							if(!isSaved){
								return;
							}
							
							if(isGenerated){
								pdfRibbonItem.enable();
								generateRibbonItem.disable();
								saveRibbonItem.disable();
								saveBack.disable();
								saveNew.disable();
								cancel.disable();
							}else{
								generateRibbonItem.enable();
								pdfRibbonItem.disable();
								saveRibbonItem.enable();
								saveBack.enable();
								saveNew.enable();
								cancel.enable();
							}
						}
					});
				]]>
			</script>			
			<component type="gridLayout" name="gridLayout" columns="3"
				rows="9" hasBorders="false">
				<layoutElement column="1" row="1">
					<component type="checkbox" name="genereated" field="generated" reference="isGenerated" defaultEnabled="false" />
				</layoutElement>
				<layoutElement column="1" row="2">
					<component type="input" name="date" field="date" reference="date" defaultEnabled="false" />
				</layoutElement>
				<layoutElement column="1" row="3">
					<component type="input" name="worker" field="worker" reference="worker" defaultEnabled="false" />
				</layoutElement>
				<layoutElement column="1" row="4" height="2">
					<component type="textarea" name="name" field="name" reference="name" />
				</layoutElement>
				<layoutElement column="1" row="6">
					<component type="lookup" name="reportedBatch" field="batch" reference="reportedBatch">
						<option type="column" name="productName" fields="product"
							expression="#product.get('name')" />
						<option type="column" name="productNumber" fields="product"
							expression="#product.get('number')" />
						<option type="column" name="supplierName" fields="supplier"
							expression="#supplier['name']" />
						<option type="searchable" value="productNumber, productName, supplierName" />
						<option type="orderable"
							value="number,productNumber,productName,supplierName" />
						<option type="expression"
							value="(#supplier == null) ? #number + ' - ' + #product.get('name') + ' (' + #product.get('number') +')' : #number + ' - ' + #product.get('name') + ' (' + #product.get('number') +') - ' + #supplier.get('name')" />
						<option type="fieldCode" value="number" />
					</component>
				</layoutElement>
				<layoutElement column="1" row="7">
					<component type="select" name="type" field="type" reference="type"/>
				</layoutElement>
				<layoutElement column="1" row="8">
					<component type="checkbox" name="includeDraft" field="includeDraft" reference="includeDraft">
						<option type="labelWidth" value="75" />
					</component>
				</layoutElement>
				<layoutElement column="1" row="9">
					<component type="checkbox" name="directRelatedOnly" field="directRelatedOnly" reference="directOnly">
						<option type="labelWidth" value="75" />
					</component>
				</layoutElement>
			</component>
			
			<option type="header" value="true" />
			<option type="expression" value="#name" />
			<listener event="printReport"
				class="com.qcadoo.mes.advancedGenealogy.AdvancedGenealogyReportService" method="printReport" />
			<listener event="generateReport"
				class="com.qcadoo.mes.advancedGenealogy.AdvancedGenealogyReportService" method="generateReport" />
		</component>
	</component>
	<hooks>
		<beforeRender class="com.qcadoo.mes.advancedGenealogy.AdvancedGenealogyReportService" method="disableForm"/>
	</hooks>
</view>
