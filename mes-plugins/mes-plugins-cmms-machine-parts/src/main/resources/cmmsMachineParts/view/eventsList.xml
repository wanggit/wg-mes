<!--

    ***************************************************************************
    Copyright (c) 2010 Qcadoo Limited
    Project: Qcadoo MES
    Version: 1.4

    This file is part of Qcadoo.

    Qcadoo is free software; you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation; either version 3 of the License,
    or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty
    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
    ***************************************************************************

-->
<view defaultAuthorizationRole="ROLE_EVENTS" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns="http://schema.qcadoo.org/view"
      xsi:schemaLocation="http://schema.qcadoo.org/view http://schema.qcadoo.org/view.xsd"
      name="eventsList" modelName="maintenanceEventContext" modelPlugin="cmmsMachineParts" menuAccessible="true">

    <component type="window" name="window" reference="window">

        <ribbon>
            <group name="contextActions">
                <bigButton name="confirmContext" icon="startIcon24.png" state="enabled">
                    <script>
                        <![CDATA[
							this.addOnChangeListener({
								onClick: function() {
									#{form}.performEvent('confirmContext', ['maintenanceEvent']);
								}
							});
						]]>
                    </script>
                </bigButton>
            </group>

            <group name="customActions">
                <bigButton name="addFailure" icon="newIcon24.png" action="#{window}.fireEvent(addEvent,01failure);"
                           state="disabled"/>
                <bigButton name="addIssue" icon="newIcon24.png" action="#{window}.fireEvent(addEvent,02issue);"
                           state="disabled"/>
                <bigButton name="addProposal" icon="newIcon24.png" action="#{window}.fireEvent(addEvent,03proposal);"
                           state="disabled"/>
            </group>
            <template name="standardGridTemplate" excludeItems="actions.copy,actions.new"/>
            <group name="status">
                <smallButton name="startEvent" icon="startIcon16.png"
                             state="disabled" action="#{grid}.changeState(startEvent);"/>
                <smallButton name="revokeEvent" icon="deleteIcon16.png"
                             state="disabled" action="#{grid}.changeState(revokeEvent);"/>
                <smallButton name="planEvent" icon="startIcon16.png"
                             state="disabled" action="#{grid}.changeState(planEvent);"/>
                <smallButton name="closeEvent" icon="acceptIcon16.png"
                             state="disabled" action="#{grid}.changeState(closeEvent);"/>
            </group>
            <group name="notifications">
                <bigButton name="turnOffSoundNotifications" icon="cancelIcon24.png"
                           action="#{grid}.fireEvent(turnOffSoundNotifications);"
                           state="disabled"/>
            </group>
            <group name="plannedEvents">
                <bigButton name="showPlannedEvent" icon="genealogyIcon24.png"
                           action="#{grid}.fireEvent(showPlannedEvent);" state="disabled">
                </bigButton>
            </group>
            <group name="export">
                <bigButton name="xls" icon="xlsIcon24.png"
                           action="#{window}.fireEvent(printEventXlsReport);"
                           state="disabled"/>
            </group>

            <group name="workTime">
                <bigButton name="showWorkTime" icon="genealogyIcon24.png"
                           action="#{window}.fireEvent(showWorkTime);"
                           state="enabled"/>
            </group>
        </ribbon>

        <windowTab name="contextTab" reference="contextTab">
            <component type="form" name="eventContextForm" reference="form">
                <script>
                    <![CDATA[
						this.addOnChangeListener({
							onSetValue: function(value) {
								if (! value || ! value.content) {
									return;
								}
								updateRibbon();
							}
						});

						function updateRibbon() {
							var xlsButton = #{window}.getRibbonItem("export.xls");

							var confirmed = #{confirmed}.getValue().content.value,
							    confirmContextButton = #{window}.getRibbonItem("contextActions.confirmContext"),
							    confirmContextButtonLabel;

							if (confirmed == 'true' || confirmed == '1') {
								xlsButton.enable();
								confirmContextButtonLabel = "#{translate(cmmsMachineParts.eventsList.window.ribbon.contextActions.changeContext)}";
							} else {
							    xlsButton.disable();
							    confirmContextButtonLabel = "#{translate(cmmsMachineParts.eventsList.window.ribbon.contextActions.confirmContext)}";
							}

							confirmContextButton.setLabel(confirmContextButtonLabel);
						}
					]]>
                </script>

                <component type="gridLayout" name="gridLayout" columns="3" rows="4">
                    <layoutElement column="1" row="1">
                        <component type="lookup" name="factory" field="factory" reference="factory">
                            <option type="column" name="name" fields="name"/>
                            <option type="column" name="city" fields="city"/>

                            <option type="searchable" value="name,city,number"/>
                            <option type="orderable" value="name,city,number"/>

                            <option type="expression" value="#number + ' - ' + #name"/>
                            <option type="fieldCode" value="number"/>

                            <listener event="onSelectedEntityChange"
                                      method="factoryChanged"
                                      class="com.qcadoo.mes.cmmsMachineParts.listeners.ContextEventListeners"/>
                        </component>
                    </layoutElement>

                    <layoutElement column="1" row="2">
                        <component type="lookup" name="division" field="division" reference="division"
                                   source="#{factory}.divisions">
                            <option type="column" name="name" fields="name"/>

                            <option type="searchable" value="name,number"/>
                            <option type="orderable" value="name,number"/>

                            <option type="expression" value="#number + ' - ' + #name"/>
                            <option type="fieldCode" value="number"/>

                            <listener event="onSelectedEntityChange"
                                      method="divisionChanged"
                                      class="com.qcadoo.mes.cmmsMachineParts.listeners.EventListeners"/>

                            <criteriaModifier
                                    class="com.qcadoo.mes.cmmsMachineParts.criteriaModifiers.EventCriteriaModifiersCMP"
                                    method="selectDivision"/>
                        </component>
                    </layoutElement>
                    <layoutElement column="1" row="3">
                        <component type="hidden" name="dateFrom" field="dateFrom"
                                   reference="dateFrom">
                        </component>
                    </layoutElement>
                    <layoutElement column="1" row="4">
                        <component type="hidden" name="dateTo" field="dateTo"
                                   reference="dateTo">
                        </component>
                    </layoutElement>
                    <layoutElement column="2" row="1">
                        <component type="hidden" name="confirmed" field="confirmed"
                                   reference="confirmed"/>
                        <component type="hidden" name="generated" field="generated"
                                   reference="generated"/>
                        <component type="hidden" name="acceptanceEvents" field="acceptanceEvents"
                                   reference="acceptanceEvents"/>
                    </layoutElement>
                </component>
                <listener event="confirmContext" method="confirmContext"
                          class="com.qcadoo.mes.cmmsMachineParts.listeners.EventsListListeners"/>
            </component>
        </windowTab>

        <windowTab name="mainTab" reference="mainTab">
            <component type="grid" name="grid" reference="grid" field="#{form}.maintenanceEventListDtos">
                <script>
                    <![CDATA[
					var toggleRibbonItems = ["actions.delete"];

					this.addOnChangeListener({
						onChange: function(selectedEntitiesArray) {
							if (selectedEntitiesArray && selectedEntitiesArray.length > 0) {
								updateRibbon(selectedEntitiesArray);
								if(selectedEntitiesArray.length > 1) {
									getRibbonItem("status.revokeEvent").disable("#{translate(cmmsMachineParts.eventsList.window.ribbon.status.cantRevokeMany)}");
								}
							} else {
								resetRibbon();
							}
						}
					});

					this.changeState = function(eventPerformer, ribbonItemName, entityId) {
						var ribbonItem = #{window}.getRibbonItem("status." + ribbonItemName);
						var newState = ribbonItem.forState;
						if (window.confirm(ribbonItem.confirmMessage)) {
							if (window.canClose()) {
								#{grid}.fireEvent(eventPerformer, 'changeState', [newState]);
							}
						}
					}

					function resetRibbon() {
						for (var elementKey in toggleRibbonItems) {
							getRibbonItem(toggleRibbonItems[elementKey]).disable();
						}
						getRibbonItem("status.startEvent").disable();
						getRibbonItem("status.revokeEvent").disable();
						getRibbonItem("status.planEvent").disable();
						getRibbonItem("status.closeEvent").disable();
						getRibbonItem("plannedEvents.showPlannedEvent").disable();
						getRibbonItem("notifications.turnOffSoundNotifications").disable();
					}

					function updateRibbon(selectedEntitiesArray) {
						var locked = shouldLockStatusRibbonItems(selectedEntitiesArray);
						var lockedMessage = "#{translate(cmmsMachineParts.eventsList.window.ribbon.status.cantModifyEvent)}";
						var differentStatesMessage = "#{translate(cmmsMachineParts.eventsList.window.ribbon.status.differentStates)}";
						var differentStates = statesAreDifferent(selectedEntitiesArray);
                        var showPlannedEvent = #{window}.getRibbonItem("plannedEvents.showPlannedEvent");
                        var turnOffSoundNotifications = #{window}.getRibbonItem("notifications.turnOffSoundNotifications");
                        var enableNotification = canEnableNotification(selectedEntitiesArray);

                        var acceptanceEvents = #{acceptanceEvents}.getValue().content.value;

						for (var elementKey in toggleRibbonItems) {
							var ribbonItem = getRibbonItem(toggleRibbonItems[elementKey]);
							if (!ribbonItem) {
								continue;
							}

							if (locked && differentStates) {
								ribbonItem.disable(differentStatesMessage);
							} else if (locked) {
								ribbonItem.disable(lockedMessage);
							} else {
								ribbonItem.enable();
							}
						}

                        if(enableNotification){
                            turnOffSoundNotifications.enable();
                        } else {
                            turnOffSoundNotifications.disable();
                        }

						if (!differentStates) {
							var state = selectedEntitiesArray[0].fields.state;
						}

						if (state && (state == "01new" || state == "05revoked")) {
							getRibbonItem("actions.delete").enable();
						}
						else {
						    getRibbonItem("actions.delete").disable();
						}
                        if (state && state == "06planned" && selectedEntitiesArray.length == 1) {
                            showPlannedEvent.enable();
                        }
                        else {
                            showPlannedEvent.disable();
                        }
                            var startEvent = #{window}.getRibbonItem("status.startEvent");
                            var planEvent = #{window}.getRibbonItem("status.planEvent");
                            var revokeEvent = #{window}.getRibbonItem("status.revokeEvent");
                            var closeEvent = #{window}.getRibbonItem("status.closeEvent");


							startEvent.forState="02inProgress";
							startEvent.confirmMessage = "#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.confirm.inProgress)}";
							startEvent.setLabel("#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.startEvent)}");

							closeEvent.forState="04closed";
							closeEvent.confirmMessage = "#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.confirm.closed)}";

							revokeEvent.forState="05revoked";
							revokeEvent.confirmMessage = "#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.confirm.revoked)}";

							planEvent.forState="06planned";
							planEvent.confirmMessage = "#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.confirm.planned)}";


							if (state == "01new") {
								startEvent.enable();
								if (selectedEntitiesArray.length == 1) {
								    planEvent.enable();
								}
								else {
								    planEvent.disable();
								}

								planEvent.forState="06planned";
							    planEvent.confirmMessage = "#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.confirm.planned)}";
							    planEvent.setLabel("#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.planEvent)}");
								revokeEvent.enable();
								closeEvent.disable();
								startEvent.setLabel("#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.startEvent)}");
								startEvent.confirmMessage = "#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.confirm.inProgress)}";
							} else if (state == "02inProgress") {

								startEvent.enable();
                                if (selectedEntitiesArray.length == 1) {
								    planEvent.enable();
								}
								else {
								    planEvent.disable();
								}
								revokeEvent.enable();
								closeEvent.disable();

                                planEvent.forState="06planned";
							    planEvent.confirmMessage = "#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.confirm.planned)}";
							    planEvent.setLabel("#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.planEvent)}");


							    startEvent.forState="03edited";
							    startEvent.confirmMessage = "#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.confirm.edited)}";
							    startEvent.setLabel("#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.stopEvent)}");

							} else if (state == "05revoked" || state == "06planned" || state == "04closed") {
								startEvent.disable();
								planEvent.disable();
								revokeEvent.disable();
								closeEvent.disable();

							} else if ( state == "03edited") {
							    if(acceptanceEvents == "true"){

								    startEvent.disable();
								    if (selectedEntitiesArray.length == 1) {
								        planEvent.enable();
								    }
								    else {
								        planEvent.disable();
								    }
								    revokeEvent.disable();
								    closeEvent.enable();

                                    planEvent.forState="02inProgress";
							        planEvent.confirmMessage = "#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.confirm.notAccept)}";
							        planEvent.setLabel("#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.notAcceptEvent)}");

								    closeEvent.forState="07accepted";
							        closeEvent.confirmMessage = "#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.confirm.accepted)}";
							        closeEvent.setLabel("#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.acceptEvent)}");
                                } else {
                                    closeEvent.forState="04closed";
							        closeEvent.confirmMessage = "#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.confirm.closed)}";
							        closeEvent.setLabel("#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.closeEvent)}");

								    closeEvent.enable();
								    startEvent.disable();
								    planEvent.disable();
								    revokeEvent.disable();
                                }
							}
							else if ( state == "07accepted"){
								startEvent.disable();
								planEvent.disable();
								revokeEvent.disable();
								closeEvent.enable();

                                closeEvent.forState="04closed";
							    closeEvent.confirmMessage = "#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.confirm.closed)}";
							    closeEvent.setLabel("#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.closeEvent)}");

							}
							else {
							    startEvent.disable();
								planEvent.disable();
								revokeEvent.disable();
								closeEvent.disable();
							}
					}

					function getRibbonItem(ribbonPath) {
						return #{window}.getRibbonItem(ribbonPath);
					}

					function shouldLockStatusRibbonItems(selectedEntitiesArray) {
						return selectedEntitiesArray[0].fields.state == '05revoked' || selectedEntitiesArray[0].fields.state == '06planned' || selectedEntitiesArray[0].fields.state == '04closed' ||
								statesAreDifferent(selectedEntitiesArray);
					}

					function statesAreDifferent(selectedEntitiesArray) {
						if (selectedEntitiesArray.length < 2) {
							return false;
						}
						for (var i = 1; i < selectedEntitiesArray.length; i++) {
							if (selectedEntitiesArray[i-1].fields.state != selectedEntitiesArray[i].fields.state) {
								return true;
							}
						}
						return false;
					}

					function canEnableNotification(selectedEntitiesArray) {
						if (selectedEntitiesArray.length == 0) {
							return false;
						}
						var canEnable = true;
						for (var i = 0; i < selectedEntitiesArray.length; i++) {
							if (selectedEntitiesArray[i].fields.state !=  "01new" || selectedEntitiesArray[i].fields.type == "03proposal" ) {


								canEnable = false;
							}
						}
						return canEnable;
					}


				]]>
                </script>
                <option type="column" name="number" fields="number" link="true"/>
                <option type="column" name="type" fields="type" link="true"/>
                <option type="column" name="factory" fields="factoryNumber" link="true"/>
                <option type="column" name="division" fields="divisionNumber" link="true"/>
                <option type="column" name="productionLine" fields="productionLineNumber"
                        link="true"/>
                <option type="column" name="workstation" fields="workstationNumber"
                        link="true"/>
                <option type="column" name="subassembly" fields="subassemblyNumber"
                        link="true"/>
                <option type="column" name="faultType" fields="faultTypeName"
                        link="false"/>
                <option type="column" name="description" fields="description" link="true"/>
                <option type="column" name="createDate" fields="createDate" link="false"/>
                <option type="column" name="createUser" fields="createUser" link="false"/>
                <option type="column" name="reportingemployeename" fields="reportingemployeename"
                        link="false"/>
                <option type="column" name="personReceiving" fields="personReceivingName"
                        link="false"/>

                <option type="column" name="state" fields="state" link="false"/>


                <option type="searchable"
                        value="number,type,factory,division,productionLine,workstation,subassembly,description,createDate,createUser,personReceiving,reportingemployeename,faultType,state"/>
                <option type="orderable"
                        value="number,type,factory,division,productionLine,workstation,subassembly,description,createDate,createUser,personReceiving,reportingemployeename,faultType,state"/>
                <option type="multiselect" value="true"/>
                <option type="fullscreen" value="true"/>

                <option type="correspondingView" value="cmmsMachineParts/maintenanceEventDetails"/>
                <option type="correspondingComponent" value="form"/>

                <option type="order" column="number" direction="desc"/>
                <option type="fullscreen" value="true"/>

                <option type="hasPredefinedFilters" value="true"/>
                <option type="defaultPredefinedFilterName" value="open"/>
                <option type="autoRefresh" value="true"/>
                <predefinedFilters>

                    <predefinedFilter name="all">
                    </predefinedFilter>

                    <predefinedFilter name="open">
                        <filterRestriction column="state"
                                           value="[01new,02inProgress,03edited,07accepted]"/>
                    </predefinedFilter>

                    <predefinedFilter name="finished">
                        <filterRestriction column="state"
                                           value="[04closed,05revoked,06planned]"/>
                    </predefinedFilter>

                </predefinedFilters>

                <listener event="changeState"
                          class="com.qcadoo.mes.cmmsMachineParts.states.MaintenanceEventStateChangeViewClient"
                          method="changeState"/>

                <listener event="onSelectedEntityChange"
                          class="com.qcadoo.mes.cmmsMachineParts.listeners.EventsListListeners"
                          method="onSelectedEventChange"/>

                <listener event="turnOffSoundNotifications"
                          class="com.qcadoo.mes.cmmsMachineParts.listeners.EventsListListeners"
                          method="turnOffSoundNotifications"/>

                <listener event="showPlannedEvent"
                          class="com.qcadoo.mes.cmmsMachineParts.listeners.EventsListListeners"
                          method="showPlannedEvent"/>


                <criteriaModifier class="com.qcadoo.mes.cmmsMachineParts.criteriaModifiers.EventCriteriaModifiersCMP"
                                  method="showEventsFromContext"/>

                <rowStyleResolver
                        class="com.qcadoo.mes.cmmsMachineParts.hooks.EventHooks"
                        method="fillRowStyles"/>
            </component>
        </windowTab>

        <option type="fixedHeight" value="true"/>
        <option type="header" value="false"/>

        <listener event="addEvent" method="addEvent"
                  class="com.qcadoo.mes.cmmsMachineParts.listeners.EventsListListeners"/>
        <listener event="printEventXlsReport" method="printEventXlsReport"
                  class="com.qcadoo.mes.cmmsMachineParts.listeners.EventsListListeners"/>

        <listener event="showWorkTime" method="showWorkTime"
                  class="com.qcadoo.mes.cmmsMachineParts.listeners.WorkTimeForUserListeners"/>
    </component>

    <hooks>
        <beforeRender
                class="com.qcadoo.mes.cmmsMachineParts.hooks.EventHooks"
                method="onBeforeRenderListView"/>
    </hooks>
</view>
