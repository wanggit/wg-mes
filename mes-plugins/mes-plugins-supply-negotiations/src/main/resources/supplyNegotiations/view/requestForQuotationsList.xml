<?xml version="1.0" encoding="UTF-8"?>
<!--

    ***************************************************************************
    Copyright (c) 2010 Qcadoo Limited
    Project: Qcadoo Framework
    Version: 1.4

    This file is part of Qcadoo.

    Qcadoo is free software; you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation; either version 3 of the License,
    or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty
    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
    ***************************************************************************

-->
<view defaultAuthorizationRole="ROLE_REQUEST_FOR_QUOTATIONS" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns="http://schema.qcadoo.org/view"
      xsi:schemaLocation="http://schema.qcadoo.org/view http://schema.qcadoo.org/view.xsd"
      name="requestForQuotationsList" modelName="requestForQuotation"
      menuAccessible="true">

    <component type="window" name="window" reference="window">

        <ribbon>
            <template name="standardGridTemplate"/>
            <group name="status">
                <smallButton name="accept" icon="startIcon16.png"
                             state="disabled">
                    <script>
                        <![CDATA[
							this.addOnChangeListener({
								onClick: function() {
									if (window.confirm("#{translate(supplyNegotiations.requestForQuotationDetails.window.ribbon.status.accept.confirm)}")) {
										#{grid}.performEvent('changeState', ['02accepted']);
									};
								}
							});
						]]>
                    </script>
                </smallButton>
                <smallButton name="decline" icon="deleteIcon16.png"
                             state="disabled">
                    <script>
                        <![CDATA[
							this.addOnChangeListener({
								onClick: function() {
									if (window.confirm("#{translate(supplyNegotiations.requestForQuotationDetails.window.ribbon.status.cancel.confirm)}")) {
										#{grid}.performEvent('changeState', ['03declined']);
									};
								}
							});
						]]>
                    </script>
                </smallButton>
            </group>
        </ribbon>

        <component type="grid" name="requestsForQuotation" reference="grid">
            <script>
                <![CDATA[
 					var copyBtn = #{window}.getRibbonItem("actions.copy");
					var deleteBtn = #{window}.getRibbonItem("actions.delete");
					
					var acceptBtn = #{window}.getRibbonItem("status.accept");
					var declineBtn = #{window}.getRibbonItem("status.decline");
					
					var listener = {
						onChange: function(selectedEntitiesArray) {
							if (!selectedEntitiesArray || selectedEntitiesArray.length == 0) {
								copyBtn.disable();
								deleteBtn.disable();
								acceptBtn.disable();
								declineBtn.disable();
							} else {
								var noDifferentStates = true;
 								if (selectedEntitiesArray.length > 1)
								{
									for (var i = selectedEntitiesArray.length-1 ; i > 0 ; i--) {
										if (selectedEntitiesArray[i-1].fields.state != selectedEntitiesArray[i].fields.state) {
											noDifferentStates = false;
											break;
										}
									}
								} 
								if (selectedEntitiesArray.length == 1 || noDifferentStates) {
									var state = selectedEntitiesArray[0].fields.state;
									
									if (state == "01draft") {
										deleteBtn.enable();
										acceptBtn.enable();
										declineBtn.enable();
									} else if (state == "02accepted") {
										deleteBtn.disable();
										acceptBtn.disable();
										declineBtn.enable();
									} else if (state == "03declined") {
										deleteBtn.enable();
										acceptBtn.disable();
										declineBtn.disable();
									}
								} else {
									deleteBtn.disable("#{translate(supplyNegotiations.requestForQuotationList.ribbon.message.requestForQuotationWithDifferentStatesSelected)}");
									acceptBtn.disable("#{translate(supplyNegotiations.requestForQuotationList.ribbon.message.requestForQuotationWithDifferentStatesSelected)}");
									declineBtn.disable("#{translate(supplyNegotiations.requestForQuotationList.ribbon.message.requestForQuotationWithDifferentStatesSelected)}");
								}

								copyBtn.enable();
							}
						}
					}

					this.addOnChangeListener(listener);
				]]>
            </script>

            <option type="column" name="number" fields="number" link="true"
                    width="50"/>
            <option type="column" name="name" fields="name" link="true"
                    width="100"/>
            <option type="column" name="supplierName" fields="supplier"
                    expression="#supplier['name']"/>
            <option type="column" name="desiredDate" fields="desiredDate"
                    width="100"/>
            <option type="column" name="state" fields="state"/>
            <option type="column" name="createDate" fields="createDate"
                    width="100"/>
            <option type="column" name="negotiationNumber" fields="negotiation" expression="#negotiation['number']"/>

            <option type="order" column="number" direction="asc"/>

            <option type="searchable" value="number,name,supplierName,desiredDate,state,createDate,negotiationNumber"/>
            <option type="orderable" value="number,name,supplierName,desiredDate,state,createDate,negotiationNumber"/>

            <option type="correspondingView" value="supplyNegotiations/requestForQuotationDetails"/>
            <option type="correspondingComponent" value="form"/>

            <option type="fullscreen" value="true"/>
            <option type="multiselect" value="true"/>

            <listener event="changeState"
                      class="com.qcadoo.mes.supplyNegotiations.states.client.RequestForQuotationViewClient"
                      method="changeState"/>
        </component>

        <option type="fixedHeight" value="true"/>
        <option type="header" value="false"/>
    </component>

</view>